{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"kesheng","url":"http://getitkesheng.github.io","root":"/"},"pages":[],"posts":[{"title":"单链表的创建，遍历，插入，删除","slug":"05","date":"2019-05-11T15:53:59.797Z","updated":"2019-05-11T15:57:00.520Z","comments":true,"path":"2019/05/11/05/","link":"","permalink":"http://getitkesheng.github.io/2019/05/11/05/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136#include&lt;stdio.h&gt;#include&lt;malloc.h&gt;#define LEN sizeof(struct node) struct node //节点类型 &#123; int data; //定义数据域 struct node *next; //定义指针域 &#125;; int n=0; //记录节点的个数 /*头插法创建动态单链表*/ struct node *creatlist() &#123; struct node *head,*p,*q; head=p=(struct node *)malloc(LEN); //创建第一个节点并由head,p指针指向 scanf(&quot;%d&quot;,&amp;p-&gt;data); //为数据域复制 head-&gt;next=NULL; while(p-&gt;data!=0) &#123; n=n+1; //节点数加一 if(n==1) q=p; //使得创建的第二个节点能顺利指向第一个节点 else //链入新节点 &#123; p-&gt;next=q; head=p; &#125; q=p; //使得后来创建的每一个节点都能指向后一个节点 p=(struct node *)malloc(LEN); //创建新节点 scanf(&quot;%d&quot;,&amp;p-&gt;data); //为新创建节点的指针域赋值 &#125; free(p); return(head); &#125; /*单链表的遍历*/ void print(struct node *head) &#123; struct node *p; printf(&quot;\\nthese %d records are:\\n&quot;,n); p=head; if(head!=NULL) do &#123; printf(&quot;%d\\n&quot;,p-&gt;data); p=p-&gt;next; &#125; while(p!=NULL); &#125; /*单链表的插入*/ struct node *insert(struct node *head,int ins_num) &#123; struct node *p,*q1,*q2; q1=head; //使q1指向第一个节点 p=(struct node*)malloc(LEN); p-&gt;data = ins_num; if(head == NULL) //如果原来的链表是空表 &#123; head=p; p-&gt;next=NULL; //使p指向的节点作为空节点 &#125; if(p-&gt;data&lt;head-&gt;data) &#123; head=p; p-&gt;next=q1; //将待插节点放在第一个节点之前 &#125; else &#123; while((p-&gt;data&gt;=q1-&gt;data) &amp;&amp; (q1!=NULL)) &#123; q2=q1; q1=q1-&gt;next; //用循环找到要插入的位置 &#125; q2-&gt;next=p; p-&gt;next=q1; //链入待插节点 &#125; n=n+1; //节点数加1 return(head); //返回头指针 &#125; /*单链表的删除*/ struct node *del(struct node *head,int del_num) &#123; struct node *q1,*q2; q1=head; //让q1指向第一个节点 if(head==NULL) //若是空链表，则提示出错 &#123; printf(&quot;error,list null!&quot;); &#125; else &#123; while((del_num!=q1-&gt;data) &amp;&amp; (q1-&gt;next!=NULL)) //用循环找到要删除的节点位置 &#123; q2=q1; q1=q1-&gt;next; &#125; if(del_num == q1-&gt;data) &#123; if(q1==head) head=q1-&gt;next; //若果q1指向的是首节点，则将head指向第二个节点的位置 else &#123; q2-&gt;next = q1-&gt;next; //将下一节点的地址赋给前一节点的地址 &#125; free(q1); //释放节点空间 n=n-1; &#125; else printf(&quot;%d not been found!\\n&quot;,del_num); &#125; return(head); &#125; void main()&#123; struct node *head; int ins_num,del_num; //定义将要删除的数据 printf(&quot;please input records:\\n&quot;); head = creatlist(); //调用动态单链表建立函数 print(head); //调用print()函数,遍历并输出创建的动态链表 printf(&quot;please input the inserted record:\\n&quot;); scanf(&quot;%d&quot;,&amp;ins_num); while(ins_num != 0) //插入节点 &#123; head = insert(head,ins_num); print(head); printf(&quot;please input the inserted record:\\n&quot;); scanf(&quot;%d&quot;,&amp;ins_num); &#125; printf(&quot;please input the deleted record:\\n&quot;); scanf(&quot;%d&quot;,&amp;del_num); while(del_num!=0) //删除节点 &#123; head = del(head,del_num); print(head); printf(&quot;please input the deleted record:\\n&quot;); scanf(&quot;%d&quot;,&amp;del_num); &#125; &#125;","categories":[],"tags":[]},{"title":"除了感动，无话可说！","slug":"04","date":"2019-05-11T09:40:57.579Z","updated":"2019-05-11T12:12:57.831Z","comments":true,"path":"2019/05/11/04/","link":"","permalink":"http://getitkesheng.github.io/2019/05/11/04/","excerpt":"","text":"warriors never quit","categories":[],"tags":[]},{"title":"插入排序","slug":"03","date":"2019-05-11T08:24:48.047Z","updated":"2019-05-11T08:29:28.123Z","comments":true,"path":"2019/05/11/03/","link":"","permalink":"http://getitkesheng.github.io/2019/05/11/03/","excerpt":"","text":"C语言实现插入排序（2019.5.11更）12345678910111213141516171819202122232425#include&lt;stdio.h&gt;int main()&#123; int i,j,n,k,a[100],t; printf(&quot;请输入你想要排序的数组长度n:&quot;); scanf(&quot;%d&quot;,&amp;n); printf(&quot;请随机输入%d个整数：&quot;,n); for(i=0;i&lt;n;i++) scanf(&quot;%d&quot;,&amp;a[i]); for(j=1;j&lt;n;j++)&#123; k=j-1; while(k&gt;=0&amp;&amp;a[k]&gt;a[j])&#123; t=a[k]; a[k]=a[j]; a[j]=t; k--; j--; &#125; &#125; printf(&quot;经插入排序后的输出结果为：\\n&quot;); for(j=0;j&lt;n;j++) printf(&quot;%3d&quot;,a[j]); printf(&quot;\\n&quot;); printf(&quot;今天是三八妇女节，祝我的妈妈和所有的母亲节日快乐，永远健康!!!&quot;); return 0;&#125;","categories":[],"tags":[]},{"title":"选择排序","slug":"02","date":"2019-05-11T08:24:48.047Z","updated":"2019-05-11T08:27:16.151Z","comments":true,"path":"2019/05/11/02/","link":"","permalink":"http://getitkesheng.github.io/2019/05/11/02/","excerpt":"","text":"C语言实现选择排序123456789101112131415161718192021222324#include&lt;stdio.h&gt;int main()&#123; int i,j,k,t; int a[20]; printf(&quot;请任意输入20个整数：&quot;); for(i=0;i&lt;20;i++) scanf(&quot;%d&quot;,&amp;a[i]); for(i=0;i&lt;19;i++)&#123; k=i; for(j=i+1;j&lt;=19;j++) if(a[j]&lt;a[k]) k=j; if(k!=i)&#123; t=a[k]; a[k]=a[i]; a[i]=t; &#125; &#125; printf(&quot;排序后的结果为：\\n&quot;); for(i=0;i&lt;20;i++) printf(&quot;%3d&quot;,a[i]); return 0;&#125;","categories":[],"tags":[]},{"title":"冒泡排序","slug":"01","date":"2019-05-11T07:16:28.266Z","updated":"2019-05-11T08:22:40.826Z","comments":true,"path":"2019/05/11/01/","link":"","permalink":"http://getitkesheng.github.io/2019/05/11/01/","excerpt":"","text":"C语言实现冒泡排序1234567891011121314151617181920212223#include&lt;stdio.h&gt;int main()&#123; int a[20],i,j,t; printf(&quot;请随机输入20个整数：&quot;); for(i=0;i&lt;20;i++)&#123; scanf(&quot;%d&quot;,&amp;a[i]); getchar(); &#125; for(i=0;i&lt;19;i++) for(j=0;j&lt;19-i;j++)&#123; if(a[j]&gt;a[j+1]) &#123; t=a[j]; a[j]=a[j+1]; a[j+1]=t; &#125; &#125; printf(&quot;排序结果为：\\n&quot;); for(i=0;i&lt;20;i++) printf(&quot;%d&quot;,a[i]); return 0;&#125;","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-05-03T10:49:54.680Z","updated":"2019-05-03T10:49:54.680Z","comments":true,"path":"2019/05/03/hello-world/","link":"","permalink":"http://getitkesheng.github.io/2019/05/03/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}